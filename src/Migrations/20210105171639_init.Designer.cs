// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YA.TenantWorker.Infrastructure.Data;

namespace YA.TenantWorker.Migrations
{
    [DbContext(typeof(TenantWorkerDbContext))]
    [Migration("20210105171639_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("YA.TenantWorker.Core.Entities.PricingTier", b =>
                {
                    b.Property<Guid>("PricingTierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("HasTrial")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("MaxScheduledTasks")
                        .HasColumnType("int");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<int>("MaxVkCommunities")
                        .HasColumnType("int");

                    b.Property<int>("MaxVkCommunitySize")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("TrialPeriod")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("tstamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PricingTierID");

                    b.ToTable("PricingTiers");

                    b.HasData(
                        new
                        {
                            PricingTierID = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Бесплатно для всех.",
                            HasTrial = false,
                            LastModifiedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxScheduledTasks = 0,
                            MaxUsers = 1,
                            MaxVkCommunities = 1,
                            MaxVkCommunitySize = 1000,
                            Title = "Бесплатный"
                        },
                        new
                        {
                            PricingTierID = new Guid("00000000-0000-0000-0000-000000000013"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "За денежки",
                            HasTrial = true,
                            LastModifiedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxScheduledTasks = 1,
                            MaxUsers = 1,
                            MaxVkCommunities = 1,
                            MaxVkCommunitySize = 10000,
                            Title = "Платный",
                            TrialPeriod = 12960000000000L
                        });
                });

            modelBuilder.Entity("YA.TenantWorker.Core.Entities.Tenant", b =>
                {
                    b.Property<Guid>("TenantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthProvider")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("PricingTierActivatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PricingTierActivatedUntilDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PricingTierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<byte[]>("tstamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("TenantID");

                    b.HasIndex("PricingTierId");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            TenantID = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsReadOnly = false,
                            PricingTierActivatedDateTime = new DateTime(2021, 1, 5, 17, 16, 38, 387, DateTimeKind.Utc).AddTicks(3667),
                            PricingTierActivatedUntilDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PricingTierId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Status = 1,
                            Type = 0
                        },
                        new
                        {
                            TenantID = new Guid("00000000-0000-0000-0000-000000000002"),
                            IsReadOnly = false,
                            PricingTierActivatedDateTime = new DateTime(2021, 1, 5, 17, 16, 38, 387, DateTimeKind.Utc).AddTicks(5348),
                            PricingTierActivatedUntilDateTime = new DateTime(2021, 2, 4, 17, 16, 38, 387, DateTimeKind.Utc).AddTicks(5354),
                            PricingTierId = new Guid("00000000-0000-0000-0000-000000000013"),
                            Status = 1,
                            Type = 1
                        });
                });

            modelBuilder.Entity("YA.TenantWorker.Core.Entities.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPendingActivation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<byte[]>("tstamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("UserID");

                    b.HasIndex("TenantId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("00000000-0000-0000-0000-000000000011"),
                            CreatedDateTime = new DateTime(2021, 1, 5, 17, 16, 38, 387, DateTimeKind.Utc).AddTicks(6667),
                            Email = "admin@email.com",
                            FirstName = "My",
                            IsActive = true,
                            IsDeleted = false,
                            IsPendingActivation = false,
                            LastModifiedDateTime = new DateTime(2021, 1, 5, 17, 16, 38, 387, DateTimeKind.Utc).AddTicks(6672),
                            LastName = "Admin",
                            Password = "123",
                            Role = "Administrator",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Username = "admin@ya.ru"
                        },
                        new
                        {
                            UserID = new Guid("00000000-0000-0000-0000-000000000012"),
                            CreatedDateTime = new DateTime(2021, 1, 5, 17, 16, 38, 387, DateTimeKind.Utc).AddTicks(8823),
                            Email = "user@email.com",
                            FirstName = "My",
                            IsActive = true,
                            IsDeleted = false,
                            IsPendingActivation = false,
                            LastModifiedDateTime = new DateTime(2021, 1, 5, 17, 16, 38, 387, DateTimeKind.Utc).AddTicks(8829),
                            LastName = "User",
                            Password = "123",
                            Role = "User",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Username = "user@ya.ru"
                        });
                });

            modelBuilder.Entity("YA.TenantWorker.Core.Entities.YaClientInfo", b =>
                {
                    b.Property<Guid>("YaClientInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Browser")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BrowserVersion")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClientVersion")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryName")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DeviceModel")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Os")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OsVersion")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegionName")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ScreenResolution")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasMaxLength(320)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("ViewportSize")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("tstamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("YaClientInfoID");

                    b.HasIndex("TenantId");

                    b.ToTable("ClientInfos");
                });

            modelBuilder.Entity("YA.TenantWorker.Core.Entities.Tenant", b =>
                {
                    b.HasOne("YA.TenantWorker.Core.Entities.PricingTier", "PricingTier")
                        .WithMany("Tenants")
                        .HasForeignKey("PricingTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PricingTier");
                });

            modelBuilder.Entity("YA.TenantWorker.Core.Entities.User", b =>
                {
                    b.HasOne("YA.TenantWorker.Core.Entities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("YA.TenantWorker.Core.Entities.YaClientInfo", b =>
                {
                    b.HasOne("YA.TenantWorker.Core.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("YA.TenantWorker.Core.Entities.PricingTier", b =>
                {
                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("YA.TenantWorker.Core.Entities.Tenant", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
