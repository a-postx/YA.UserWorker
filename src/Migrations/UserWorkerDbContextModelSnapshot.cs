// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YA.UserWorker.Infrastructure.Data;

namespace YA.UserWorker.Migrations
{
    [DbContext(typeof(UserWorkerDbContext))]
    partial class UserWorkerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("YA.UserWorker.Core.Entities.Membership", b =>
                {
                    b.Property<Guid>("MembershipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("tstamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("MembershipID");

                    b.HasIndex("TenantID");

                    b.HasIndex("UserID");

                    b.ToTable("Memberships");

                    b.HasData(
                        new
                        {
                            MembershipID = new Guid("00000000-0000-0000-0000-000000000015"),
                            AccessType = 8,
                            IsDeleted = false,
                            TenantID = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserID = new Guid("00000000-0000-0000-0000-000000000014")
                        });
                });

            modelBuilder.Entity("YA.UserWorker.Core.Entities.PricingTier", b =>
                {
                    b.Property<Guid>("PricingTierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("HasTrial")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("TrialPeriod")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("tstamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PricingTierID");

                    b.ToTable("PricingTiers");

                    b.HasData(
                        new
                        {
                            PricingTierID = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Бесплатно для всех.",
                            HasTrial = false,
                            LastModifiedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxUsers = 1,
                            Title = "Бесплатный"
                        },
                        new
                        {
                            PricingTierID = new Guid("00000000-0000-0000-0000-000000000013"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "За денежки",
                            HasTrial = true,
                            LastModifiedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxUsers = 1,
                            Title = "Платный",
                            TrialPeriod = 12960000000000L
                        });
                });

            modelBuilder.Entity("YA.UserWorker.Core.Entities.Tenant", b =>
                {
                    b.Property<Guid>("TenantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("PricingTierActivatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PricingTierActivatedUntilDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PricingTierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<byte[]>("tstamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("TenantID");

                    b.HasIndex("PricingTierId");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            TenantID = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsReadOnly = false,
                            Name = "Системный",
                            PricingTierActivatedDateTime = new DateTime(2021, 6, 30, 7, 0, 44, 596, DateTimeKind.Utc).AddTicks(3430),
                            PricingTierActivatedUntilDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PricingTierId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Status = 1,
                            Type = 0
                        },
                        new
                        {
                            TenantID = new Guid("00000000-0000-0000-0000-000000000002"),
                            IsReadOnly = false,
                            Name = "Уважаемый",
                            PricingTierActivatedDateTime = new DateTime(2021, 6, 30, 7, 0, 44, 596, DateTimeKind.Utc).AddTicks(4720),
                            PricingTierActivatedUntilDateTime = new DateTime(2021, 7, 30, 7, 0, 44, 596, DateTimeKind.Utc).AddTicks(4727),
                            PricingTierId = new Guid("00000000-0000-0000-0000-000000000013"),
                            Status = 1,
                            Type = 1
                        });
                });

            modelBuilder.Entity("YA.UserWorker.Core.Entities.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthProvider")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("tstamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("UserID");

                    b.HasIndex("AuthProvider", "ExternalId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("00000000-0000-0000-0000-000000000012"),
                            AuthProvider = "auth0",
                            CreatedDateTime = new DateTime(2021, 6, 30, 7, 0, 44, 596, DateTimeKind.Utc).AddTicks(5688),
                            Email = "admin@email.com",
                            ExternalId = "lahblah",
                            IsDeleted = false,
                            LastModifiedDateTime = new DateTime(2021, 6, 30, 7, 0, 44, 596, DateTimeKind.Utc).AddTicks(5694),
                            Name = "Серый кардинал"
                        },
                        new
                        {
                            UserID = new Guid("00000000-0000-0000-0000-000000000014"),
                            AuthProvider = "auth0",
                            CreatedDateTime = new DateTime(2021, 6, 30, 7, 0, 44, 596, DateTimeKind.Utc).AddTicks(6907),
                            Email = "user@email.com",
                            ExternalId = "userLahblah",
                            IsDeleted = false,
                            LastModifiedDateTime = new DateTime(2021, 6, 30, 7, 0, 44, 596, DateTimeKind.Utc).AddTicks(6913),
                            Name = "Мышиный король"
                        });
                });

            modelBuilder.Entity("YA.UserWorker.Core.Entities.YaClientInfo", b =>
                {
                    b.Property<Guid>("YaClientInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Browser")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BrowserVersion")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClientVersion")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryName")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DeviceModel")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Os")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OsVersion")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegionName")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ScreenResolution")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasMaxLength(320)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("ViewportSize")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("tstamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("YaClientInfoID");

                    b.ToTable("ClientInfos");
                });

            modelBuilder.Entity("YA.UserWorker.Core.Entities.YaInvitation", b =>
                {
                    b.Property<Guid>("YaInvitationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessType")
                        .HasColumnType("int");

                    b.Property<bool>("Claimed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ClaimedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("CreatedMembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvitedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("tstamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("YaInvitationID");

                    b.HasIndex("TenantId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("YA.UserWorker.Core.Entities.Membership", b =>
                {
                    b.HasOne("YA.UserWorker.Core.Entities.Tenant", "Tenant")
                        .WithMany("Memberships")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YA.UserWorker.Core.Entities.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YA.UserWorker.Core.Entities.Tenant", b =>
                {
                    b.HasOne("YA.UserWorker.Core.Entities.PricingTier", "PricingTier")
                        .WithMany("Tenants")
                        .HasForeignKey("PricingTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PricingTier");
                });

            modelBuilder.Entity("YA.UserWorker.Core.Entities.User", b =>
                {
                    b.OwnsOne("YA.UserWorker.Core.Entities.UserSetting", "Settings", b1 =>
                        {
                            b1.Property<Guid>("UserID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("ShowGettingStarted")
                                .HasColumnType("bit");

                            b1.HasKey("UserID");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserID");

                            b1.HasData(
                                new
                                {
                                    UserID = new Guid("00000000-0000-0000-0000-000000000012"),
                                    ShowGettingStarted = true
                                },
                                new
                                {
                                    UserID = new Guid("00000000-0000-0000-0000-000000000014"),
                                    ShowGettingStarted = true
                                });
                        });

                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("YA.UserWorker.Core.Entities.YaInvitation", b =>
                {
                    b.HasOne("YA.UserWorker.Core.Entities.Tenant", "Tenant")
                        .WithMany("Invitations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("YA.UserWorker.Core.Entities.PricingTier", b =>
                {
                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("YA.UserWorker.Core.Entities.Tenant", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("YA.UserWorker.Core.Entities.User", b =>
                {
                    b.Navigation("Memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
